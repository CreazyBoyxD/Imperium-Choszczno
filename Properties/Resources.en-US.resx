<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="aboutMe" xml:space="preserve">
    <value>My account</value>
  </data>
  <data name="AddEditAlbum" xml:space="preserve">
    <value>Do you want add (YES) or edit (NO) selected album?</value>
  </data>
  <data name="AddEditAuthor" xml:space="preserve">
    <value>Do you want add (YES) or edit (NO) selected author?</value>
  </data>
  <data name="AddEditSong" xml:space="preserve">
    <value>Do you want add (YES) or edit (NO) selected song?</value>
  </data>
  <data name="addOrEditAlbum" xml:space="preserve">
    <value>Add or edit selected album</value>
  </data>
  <data name="addOrEditAuthor" xml:space="preserve">
    <value>Add or edit selected author</value>
  </data>
  <data name="addOrEditSong" xml:space="preserve">
    <value>Add or edit selected song</value>
  </data>
  <data name="albumAvailableSongs" xml:space="preserve">
    <value>List of available songs</value>
  </data>
  <data name="albumCover" xml:space="preserve">
    <value>Cover of album</value>
  </data>
  <data name="albumImage" xml:space="preserve">
    <value>Okładka albumu</value>
  </data>
  <data name="albumList" xml:space="preserve">
    <value>List of albums</value>
  </data>
  <data name="albumListSong" xml:space="preserve">
    <value>List of album songs</value>
  </data>
  <data name="Albums" xml:space="preserve">
    <value>Albums</value>
  </data>
  <data name="appOptions" xml:space="preserve">
    <value>Options</value>
  </data>
  <data name="authorCover" xml:space="preserve">
    <value>Cover of author</value>
  </data>
  <data name="authorImage" xml:space="preserve">
    <value>Okładka autora</value>
  </data>
  <data name="authorName" xml:space="preserve">
    <value>Name of author</value>
  </data>
  <data name="authorNotExistDB" xml:space="preserve">
    <value>Can't find a author with this ID</value>
  </data>
  <data name="Authors" xml:space="preserve">
    <value>Authors</value>
  </data>
  <data name="buyAlbum" xml:space="preserve">
    <value>Buy this album</value>
  </data>
  <data name="buyAlbumTest" xml:space="preserve">
    <value>Buy this album (test)</value>
  </data>
  <data name="buySong" xml:space="preserve">
    <value>Buy this song</value>
  </data>
  <data name="buySongTest" xml:space="preserve">
    <value>Buy this song (test)</value>
  </data>
  <data name="cancelThisOrder" xml:space="preserve">
    <value>Cancel this order</value>
  </data>
  <data name="changePass" xml:space="preserve">
    <value>Change password</value>
  </data>
  <data name="changetheme" xml:space="preserve">
    <value>Change theme</value>
  </data>
  <data name="choosenAlbumID" xml:space="preserve">
    <value>ID of selected album</value>
  </data>
  <data name="choosenAlbumSongsID" xml:space="preserve">
    <value>IDs of selected album songs</value>
  </data>
  <data name="choosenAuthorID" xml:space="preserve">
    <value>ID of selected author</value>
  </data>
  <data name="choosenOrderID" xml:space="preserve">
    <value>ID of selected order</value>
  </data>
  <data name="choosenSongID" xml:space="preserve">
    <value>ID of selected song</value>
  </data>
  <data name="choosephoto" xml:space="preserve">
    <value>Select photo</value>
  </data>
  <data name="completeFields" xml:space="preserve">
    <value>Complete the fields!</value>
  </data>
  <data name="completeLoginPass" xml:space="preserve">
    <value>Fill in your login data!</value>
  </data>
  <data name="coverOfOrderedProduct" xml:space="preserve">
    <value>Cover of ordered product</value>
  </data>
  <data name="coverOrderedProduct" xml:space="preserve">
    <value>Cover of ordered product</value>
  </data>
  <data name="delete" xml:space="preserve">
    <value>Delete this</value>
  </data>
  <data name="discount" xml:space="preserve">
    <value>Discount</value>
  </data>
  <data name="exitApp" xml:space="preserve">
    <value>Exit app</value>
  </data>
  <data name="localizationApp" xml:space="preserve">
    <value>Localization</value>
  </data>
  <data name="loggedIn" xml:space="preserve">
    <value>Logged in</value>
  </data>
  <data name="logout" xml:space="preserve">
    <value>Logout</value>
  </data>
  <data name="myOrders" xml:space="preserve">
    <value>My orders</value>
  </data>
  <data name="nameImageAuthor" xml:space="preserve">
    <value>Name of selected author image</value>
  </data>
  <data name="nameImageSong" xml:space="preserve">
    <value>Name of selected song image</value>
  </data>
  <data name="nameOfAlbum" xml:space="preserve">
    <value>Name of album</value>
  </data>
  <data name="nameOfImageAlbum" xml:space="preserve">
    <value>Name of selected album image</value>
  </data>
  <data name="nameofstudio" xml:space="preserve">
    <value>Name of Studio</value>
  </data>
  <data name="notAllFieldsFillUp" xml:space="preserve">
    <value>Not all fields have been filled in!</value>
  </data>
  <data name="notCompPass" xml:space="preserve">
    <value>Passwords do not match!</value>
  </data>
  <data name="notenoughcash" xml:space="preserve">
    <value>Not enough cash.</value>
  </data>
  <data name="orderConfirm" xml:space="preserve">
    <value>Confirm order</value>
  </data>
  <data name="orderCost" xml:space="preserve">
    <value>Cost of order</value>
  </data>
  <data name="orderProduct" xml:space="preserve">
    <value>Ordered product</value>
  </data>
  <data name="Orders" xml:space="preserve">
    <value>Orders</value>
  </data>
  <data name="orderUserAddress" xml:space="preserve">
    <value>User address</value>
  </data>
  <data name="orderUserID" xml:space="preserve">
    <value>ID of user</value>
  </data>
  <data name="orderUserNameSurname" xml:space="preserve">
    <value>Name and Surname of User</value>
  </data>
  <data name="pathImageAlbum" xml:space="preserve">
    <value>Path of selected album image</value>
  </data>
  <data name="pathImageAuthor" xml:space="preserve">
    <value>Path of selected author image</value>
  </data>
  <data name="pathImageSong" xml:space="preserve">
    <value>Path of selected song image</value>
  </data>
  <data name="priceOfAlbum" xml:space="preserve">
    <value>Price of album</value>
  </data>
  <data name="priceOfSong" xml:space="preserve">
    <value>Price of song</value>
  </data>
  <data name="productkey" xml:space="preserve">
    <value>Product Key</value>
  </data>
  <data name="programSettings" xml:space="preserve">
    <value>Program settings</value>
  </data>
  <data name="save" xml:space="preserve">
    <value>Save this</value>
  </data>
  <data name="selectAuthor" xml:space="preserve">
    <value>Select author</value>
  </data>
  <data name="selectedID" xml:space="preserve">
    <value>Selected ID</value>
  </data>
  <data name="signin" xml:space="preserve">
    <value>Sign in</value>
  </data>
  <data name="signup" xml:space="preserve">
    <value>Sign Up</value>
  </data>
  <data name="songCover" xml:space="preserve">
    <value>Cover of song</value>
  </data>
  <data name="songImage" xml:space="preserve">
    <value>Okładka utworu</value>
  </data>
  <data name="songName" xml:space="preserve">
    <value>Name of song</value>
  </data>
  <data name="Songs" xml:space="preserve">
    <value>Songs</value>
  </data>
  <data name="studiocover" xml:space="preserve">
    <value>Studio cover</value>
  </data>
  <data name="sureAlbum" xml:space="preserve">
    <value>Are you sure that is a correct photo of album?</value>
  </data>
  <data name="sureAuthor" xml:space="preserve">
    <value>Are you sure that is a correct photo of author?</value>
  </data>
  <data name="sureSong" xml:space="preserve">
    <value>Are you sure that is a correct photo of song?</value>
  </data>
  <data name="terms" xml:space="preserve">
    <value>Terms and condition</value>
  </data>
  <data name="UserAddress" xml:space="preserve">
    <value>User Address</value>
  </data>
  <data name="UserAdmin" xml:space="preserve">
    <value>Admin</value>
  </data>
  <data name="UserCash" xml:space="preserve">
    <value>User Cash</value>
  </data>
  <data name="UserCity" xml:space="preserve">
    <value>User City</value>
  </data>
  <data name="userDoesntExist" xml:space="preserve">
    <value>The user does not exist!</value>
  </data>
  <data name="userexists" xml:space="preserve">
    <value>User exists!</value>
  </data>
  <data name="UserName" xml:space="preserve">
    <value>User Name</value>
  </data>
  <data name="userNameExists" xml:space="preserve">
    <value>The username exists!</value>
  </data>
  <data name="userRegistered" xml:space="preserve">
    <value>Registered</value>
  </data>
  <data name="Users" xml:space="preserve">
    <value>Users</value>
  </data>
  <data name="UserSurname" xml:space="preserve">
    <value>User Surname</value>
  </data>
  <data name="UserUserName" xml:space="preserve">
    <value>Login (username) of user</value>
  </data>
  <data name="writeaddress" xml:space="preserve">
    <value>Enter address</value>
  </data>
  <data name="writecity" xml:space="preserve">
    <value>Enter city</value>
  </data>
  <data name="writelogin" xml:space="preserve">
    <value>Enter login</value>
  </data>
  <data name="writename" xml:space="preserve">
    <value>Enter name</value>
  </data>
  <data name="writepass" xml:space="preserve">
    <value>Enter password</value>
  </data>
  <data name="writepassword" xml:space="preserve">
    <value>Enter password</value>
  </data>
  <data name="writepasswordagain" xml:space="preserve">
    <value>Reenter password</value>
  </data>
  <data name="writesurname" xml:space="preserve">
    <value>Enter surname</value>
  </data>
  <data name="writeusername" xml:space="preserve">
    <value>Enter user name</value>
  </data>
  <data name="wrongPass" xml:space="preserve">
    <value>Wrong password!</value>
  </data>
  <data name="youcantbuymoney" xml:space="preserve">
    <value>You can't buy the product - you don't have that much cash.</value>
  </data>
</root>